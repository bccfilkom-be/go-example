// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package postgresql

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type OauthProvider string

const (
	OauthProviderGoogle OauthProvider = "google"
)

func (e *OauthProvider) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OauthProvider(s)
	case string:
		*e = OauthProvider(s)
	default:
		return fmt.Errorf("unsupported scan type for OauthProvider: %T", src)
	}
	return nil
}

type NullOauthProvider struct {
	OauthProvider OauthProvider
	Valid         bool // Valid is true if OauthProvider is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOauthProvider) Scan(value interface{}) error {
	if value == nil {
		ns.OauthProvider, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OauthProvider.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOauthProvider) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OauthProvider), nil
}

type OrderStatus string

const (
	OrderStatusSubmitted OrderStatus = "Submitted"
	OrderStatusPaid      OrderStatus = "Paid"
	OrderStatusShipped   OrderStatus = "Shipped"
	OrderStatusCancelled OrderStatus = "Cancelled"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus
	Valid       bool // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type Basket struct {
	ID      int64
	BuyerID pgtype.Int8
}

type BasketItem struct {
	ID       int64
	BasketID pgtype.Int8
	PetID    pgtype.Int8
}

type Buyer struct {
	ID       int64
	UserID   pgtype.Int8
	Username string
}

type Category struct {
	ID   int64
	Name string
}

type Order struct {
	ID              int64
	BuyerID         pgtype.Int8
	Status          OrderStatus
	Description     pgtype.Text
	ShippingAddress string
}

type OrderItem struct {
	ID       int64
	Name     string
	Photourl string
	Category string
}

type Pet struct {
	ID         int64
	CategoryID pgtype.Int8
	Name       string
	Photourl   string
	Sold       bool
	Slug       string
}

type PetTag struct {
	PetID pgtype.Int8
	TagID pgtype.Int8
}

type Tag struct {
	ID   int32
	Name string
}

type User struct {
	ID       int64
	Email    string
	Username string
	Provider OauthProvider
}
